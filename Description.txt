CI: Continuous Integration

У нас есть разработчики, которые пишут код  в своей ветке. Как только кто-то из команды вмерживает
свои изменения в главную ветку, начинает работать CI. 
Система СI обычно автоматизированная и срабатывает по триггеру. Например, это может быть commit или
merge request. Также это можно сделать вручную. Система забирает код из этой ветки, собирает его,
прогоняет тесты и если всё проходит успешно, добавляет информацию в Git. Либо может собираться какой-то
пакет, как результат сборки - артефакт.

CD: Continuous Delivery/Deployment

После CI у нас есть какой-то артефакт. Далее происходит развертывание в Stage среду на тестовые сервера 
и как продолжение могут запускаться следующие тесты, например, интеграционные. После развертывания, 
если необходимо, изменения могут попасть сразу в Prod.
Pipeline - это когда мы описываем то, что будет делать система CI/CD  в виде кода. Пишется сценарий, 
по которому будет работать система.

Jenkins
Состоит из:

 - Cерверной части
    - Мастер (набор из XML конфигураций на жестком диске)
    - запущенные процессы на Java
	
 - Агентов, которые выполняют все действия.
    Каждый агент может иметь несколько процессов. Количество процессов говорит о том, сколько сборок, 
    диплоев и каких-то действий мы можем делать одновременно.
    Может быт отдельный агент на каждую среду. На агентов ставятся метки по выполняемым ими задачам. 
    Далее в пайплайне указывается -  на агентах с какими метками можно выполнять сборку. 
	
Docker
-это средство упаковки, доставки и запуска приложения.
Docker image -  сборка, готовое к запуску приложение.
Image представляет собой многослойную систему в которой мы можем добавлять свои слои.
Контейнер - это работающее приложение, созданное на базе image.
DockerHub - реестр уже созданных images, которые мы можем использовать.
Dockerfile - содержит информацию как именно нужно упаковать приложение.

Базовые команды:
docker images  -  проверить какие созданы images
docker ps  -  какие запущены кантейнеры
docker ps -a  -  посмотреть все контейнеры (и те которые уже остановились)
docker build -t hello-world .  - собираем image с именем hello-world
docker run hello-world  - запускаем контейнер
docker run --name hello -d hello-world  -   --name hello - присваиваем имя, -d - запускает в фоне,                                                                                       чтобы был свободен терминал
docker stop hello -  останавливаем контейнер
docker run --name hello -d --rm hello-world  - при запуске контейнера ставим метку, чтобы после                                                                                         выполнения от удалился

